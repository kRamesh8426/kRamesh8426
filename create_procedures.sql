
-- CREATE THE "PCPS" TABLE
CREATE TABLE PCPS_PROC (
	NPI INT PRIMARY KEY,
	PCP_FIRST_NAME VARCHAR(45) NOT NULL,
    PCP_LAST_NAME VARCHAR(45) NOT NULL,
    PCP_INITIAL VARCHAR(45)
);

SELECT * FROM PCPS_PROC;

-- CREATE THE "PROCEDURE" 
CREATE PROCEDURE INSERT_PCPS_PROC (NUMERIC,VARCHAR, VARCHAR,VARCHAR)
LANGUAGE 'PLPGSQL'
AS $$
BEGIN

INSERT INTO PUBLIC.PCPS_PROC (NPI,PCP_FIRST_NAME,PCP_LAST_NAME,PCP_INITIAL)
VALUES ($1,$2,$3,$4);

END;
$$;

-- CREATE THE "DROP PROCEDURE" 
DROP PROCEDURE IF EXISTS INSERT_PCPS_PROC (NUMERIC,VARCHAR, VARCHAR,VARCHAR);

SELECT EXISTS(
    SELECT 1
    FROM PG_PROC
    WHERE PRONAME = 'INSERT_PCPS_PROC'
);

----------------------------------------------------------------------------------

-- CREATE THE "PAYERS_PROC" TABLE
CREATE TABLE PAYERS_PROC (
	PAYER_ID INT PRIMARY KEY,
	PAYER_NAME VARCHAR(45) NOT NULL  
);

SELECT * FROM PAYERS_PROC;

-- CREATE THE "PROCEDURE" 
CREATE PROCEDURE INSERT_PAYERS_PROC (NUMERIC,VARCHAR)
LANGUAGE 'PLPGSQL'
AS $$
BEGIN

INSERT INTO PUBLIC.PAYERS_PROC (PAYER_ID,PAYER_NAME)
VALUES ($1,$2);

END;
$$;

-- INSERT INTO THE "INSERT_PAYERS_PROC" 
/*
CALL INSERT_PAYERS_PROC ('100011','AARP DENTAL');
CALL INSERT_PAYERS_PROC ('100012','ACCESS IPA BO');
CALL INSERT_PAYERS_PROC ('100013','ACCESS MEDICARE');
CALL INSERT_PAYERS_PROC ('100014','ADVANTICA BO');
CALL INSERT_PAYERS_PROC ('100015','AETNA');
CALL INSERT_PAYERS_PROC ('100016','AETNA DENTAL');
CALL INSERT_PAYERS_PROC ('100017','ALABAMA MEDICAID'); */

---------------------------------------------------------------------------

-- CREATE THE "MEMBER_MONTHS_PROC" TABLE
CREATE TABLE MEMBER_MONTHS_PROC (
	MUID INT,
	FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    DOB DATE NOT NULL,
    GENDER VARCHAR(50) NOT NULL,
    SUBSCRIBER_ID VARCHAR(50) NOT NULL,
    MEDICARE_ID VARCHAR(50) NOT NULL,
    PAYER_NAME  VARCHAR(50) NOT NULL,
    NPI INT NOT NULL,
    ELIGIBLE_MONTH DATE,
	-- PRIMARY KEY (MUID, ELIGIBLE_MONTH),
	-- FOREIGN KEY (MUID) REFERENCES MEMBERS_UNIQUE_PROC (MUID),
	FOREIGN KEY (NPI) REFERENCES PCPS_PROC (NPI));
	
COPY MEMBER_MONTHS_PROC FROM 'C:\Users\LENOVO\Desktop\Tables\Member_months.csv' DELIMITER ',' HEADER ;


SELECT * FROM MEMBER_MONTHS_PROC ;



CREATE OR REPLACE PROCEDURE RUN_MULTIPLE_STATEMENTS_PROC()
LANGUAGE PLPGSQL
AS $$
BEGIN
    -- MEMBERS_UNIQUE_PROC TABLE
	INSERT INTO MEMBERS_UNIQUE_PROC (MUID,
								FIRST_NAME,
								LAST_NAME,
								DOB,
								GENDER,
								SUBSCRIBER_ID,
								MEDICARE_ID,
								NPI)
		SELECT MUID,
				FIRST_NAME,
				LAST_NAME,
				DOB,
				GENDER,
				SUBSCRIBER_ID,
				MEDICARE_ID,
				NPI
		FROM MEMBER_MONTHS_PROC
		ON CONFLICT (MUID) DO NOTHING;

    -- AGE 2
   UPDATE MEMBERS_UNIQUE_PROC
   SET AGE = CONCAT(DATE_PART('YEAR', AGE(CURRENT_DATE, DOB)), ' YEARS');

    -- LATEST_ELIGIBLE_MONTH 3
    UPDATE MEMBERS_UNIQUE_PROC
	SET LATEST_ELIGIBLE_MONTH = SUBQUERY.LATEST_MONTH
	FROM (
		SELECT MUID, MAX(ELIGIBLE_MONTH) AS LATEST_MONTH
	FROM MEMBER_MONTHS_PROC GROUP BY MUID
		) AS SUBQUERY
	WHERE MEMBERS_UNIQUE_PROC.MUID = SUBQUERY.MUID;

	-- PAYER_ID 4
	UPDATE MEMBERS_UNIQUE_PROC
	SET PAYER_ID = PAYERS_PROC.PAYER_ID 
	FROM PAYERS_PROC
	JOIN MEMBER_MONTHS_PROC ON PAYERS_PROC.PAYER = MEMBER_MONTHS_PROC.PAYER_NAME
	WHERE MEMBERS_UNIQUE_PROC.MUID = MEMBER_MONTHS_PROC.MUID
	AND LATEST_ELIGIBLE_MONTH =
		(SELECT MAX(ELIGIBLE_MONTH)
			FROM MEMBER_MONTHS_PROC);
			
	-- IS_ACTIVE 5
	UPDATE MEMBERS_UNIQUE_PROC
	SET IS_ACTIVE = 'Y'
	WHERE LATEST_ELIGIBLE_MONTH =
		(SELECT MAX(ELIGIBLE_MONTH)
			FROM MEMBER_MONTHS_PROC);
	
	-- NPI 6
	UPDATE MEMBERS_UNIQUE_PROC
	SET NPI = SUBQUERY.NPI
	FROM (
		SELECT MUID,NPI,MAX(ELIGIBLE_MONTH)
		FROM MEMBER_MONTHS_PROC GROUP BY MUID,NPI
		) AS SUBQUERY
	WHERE MEMBERS_UNIQUE_PROC.MUID = SUBQUERY.MUID
	AND MEMBERS_UNIQUE_PROC.MUID =1;	

END;
$$;


CALL RUN_MULTIPLE_STATEMENTS_PROC();


	









